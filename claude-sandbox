#!/usr/bin/env bash
# claude-sandbox  — run Claude Code inside a tighter macOS sandbox
#
# Copyright (c) 2025 Paul Smith <paulsmith@pobox.com>
# SPDX-License-Identifier: MIT
#
#   claude-sandbox            # generate profile + run claude (default)
#   claude-sandbox run …args  # same, pass args through
#   claude-sandbox generate   # build the profile only
#   claude-sandbox profile    # print last-generated profile path
#   claude-sandbox help       # this text
#
# Note: sandbox-exec(1) is deprecated but works on macOS 14 + 15 (June 2025).
#-------------------------------------------------------------------------------

set -euo pipefail

TMPDIR="${TMPDIR:-/tmp}"
PROFILE_NAME="claude-sandbox-$(basename "$(pwd -P)")"
PROFILE_FILE="$TMPDIR/$PROFILE_NAME.sb"

usage() { grep -E '^# ' "${BASH_SOURCE[0]}" | sed 's/^# \{0,1\}//'; }

generate_profile() {
  local project_dir home_dir
  project_dir="$(pwd -P)"
  home_dir="$HOME"

  cat >"$PROFILE_FILE" <<'EOF'
;; ------------------------------------------------------------------
;;  Claude Code macOS sandbox profile (autogenerated)
;; ------------------------------------------------------------------
(version 1)
(deny default)

;; ---------- introspection & sysctl --------------------------------
(allow file-read-metadata)
(allow sysctl-read)

;; ---------- basic dir traversal -----------------------------------
(allow file-read* (literal "/"))
(allow file-read* (literal "/private"))

;; ---------- system runtime (read-only) ----------------------------
(allow file-read* file-map-executable
  (subpath "/System")
  (subpath "/usr")
  (subpath "/bin")
  (subpath "/sbin")
  (subpath "/opt/homebrew")
  (subpath "/Library/Frameworks")
  (subpath "/private/etc")
  (subpath "/nix/store")
  (subpath "/var/db/dyld")
)

;; ---------- global npm/pipx/cargo bins ----------------------------
(allow file-read*
  (subpath "__HOME__/.local/lib/node_modules")
)

;; ---------- executable paths --------------------------------------
(allow process-exec
  (subpath "/usr")
  (subpath "/System")
  (subpath "/bin")
  (subpath "/sbin")
  (subpath "/opt/homebrew")
  (subpath "/nix/store")
  (subpath "__HOME__/.local")
  (subpath "__PROJECT_DIR__")
  (literal "/usr/bin/env")
)

;; ---------- project workspace (RW) --------------------------------
(allow file-read* file-write* file-map-executable
  (subpath "__PROJECT_DIR__")
)

;; ---------- temp dirs ---------------------------------------------
(allow file-read* file-write*
  (subpath "/tmp")
  (regex "^/private/var/folders/.*/T/")
)

;; ---------- Claude config & token files ---------------------------
(allow file-read* file-write*
  (subpath "__HOME__/.claude")            ;; dir
  (literal "__HOME__/.claude.json")       ;; single file
)

;; ---------- time-zone & prefs (RO) --------------------------------
(allow file-read*
  (subpath "/private/var/db/timezone")    ;; tzdata
  (subpath "/Library/Preferences")        ;; plists
)

;; ---------- /dev access (RO) + ioctl ------------------------------
(allow file-read* (literal "/dev"))                           ;;
(allow file-read* file-write*
  (regex "^/dev/(tty.*|null|zero|dtracehelper)")
)
(allow file-ioctl
  (literal "/dev/dtracehelper")                               ;;
  (regex "^/dev/tty.*")                                       ;;
)

;; ---------- mach-lookup services ---------------------------------
(allow mach-lookup                                              ;;
  (global-name "com.apple.system.opendirectoryd.libinfo")
  (global-name "com.apple.SystemConfiguration.DNSConfiguration")
  (global-name "com.apple.coreservices.launchservicesd")
  (global-name "com.apple.system.notification_center")
  (global-name "com.apple.logd")
  (global-name "com.apple.diagnosticd")
)

;; ---------- explicit sensitive DENY list --------------------------
(deny file-read* file-write*
  (subpath "__HOME__/Documents")
  (subpath "__HOME__/Desktop")
  (subpath "__HOME__/Downloads")
  (subpath "__HOME__/Pictures")
  (subpath "__HOME__/Movies")
  (subpath "__HOME__/Music")
  (regex "^__HOME__/\\.(ssh|aws|gnupg|kube|docker|config)($|/)")
)

;; ---------- networking --------------------------------------------
(allow network*)
EOF

  sed -i '' \
    -e "s|__PROJECT_DIR__|$project_dir|g" \
    -e "s|__HOME__|$home_dir|g" \
    "$PROFILE_FILE"
}

run_claude() {
  [ $# -gt 0 ] && shift # drop “run”
  generate_profile
  echo "→ Running Claude Code sandboxed in:  $PWD"
  echo "→ Profile: $PROFILE_FILE"
  exec sandbox-exec -f "$PROFILE_FILE" claude "$@"
}

cmd="${1:-run}"
case "$cmd" in
  run)         run_claude        "$@" ;;
  generate)    generate_profile  && echo "$PROFILE_FILE" ;;
  profile)     echo "$PROFILE_FILE" ;;
  help|-h|--help) usage ;;
  *)           echo "Unknown command: $cmd"; echo; usage; exit 1 ;;
esac
